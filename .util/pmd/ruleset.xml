<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
Copyright (c) 2012 Mia-Software

All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
	Grégoire Dupé (Mia-Software) - Bug 369196 - [Dev] We need an EMF Facet dedicated PMD rule set 
 -->
<ruleset xmlns="http://pmd.sf.net/ruleset/1.0.0" name="pmd"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd"
	xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd">
	<description>PMD Plug-in preferences rule set dedicated to the project 'EMF Facet'.</description>
	<exclude-pattern>.*/internal/Messages.java</exclude-pattern>
	<exclude-pattern>.*/generated/.*\.java</exclude-pattern>
	<exclude-pattern>.*/src-.*/.*</exclude-pattern>
	<exclude-pattern>.*/.*-gen/.*</exclude-pattern>
	<rule ref="rulesets/java/typeresolution.xml/LooseCoupling" />
	<rule ref="rulesets/java/typeresolution.xml/CloneMethodMustImplementCloneable" />
	<rule ref="rulesets/java/typeresolution.xml/UnusedImports" />
	<rule ref="rulesets/java/typeresolution.xml/SignatureDeclareThrowsException" />
	<rule ref="rulesets/java/braces.xml/IfStmtsMustUseBraces" />
	<rule ref="rulesets/java/braces.xml/WhileLoopsMustUseBraces" />
	<rule ref="rulesets/java/braces.xml/IfElseStmtsMustUseBraces" />
	<rule ref="rulesets/java/braces.xml/ForLoopsMustUseBraces" />
	<rule ref="rulesets/java/design.xml/UseSingleton" />
	<rule ref="rulesets/java/design.xml/SimplifyBooleanReturns" />
	<rule ref="rulesets/java/design.xml/SimplifyBooleanExpressions" />
	<rule ref="rulesets/java/design.xml/SwitchStmtsShouldHaveDefault" />
	<rule ref="rulesets/java/design.xml/AvoidDeeplyNestedIfStmts" />
	<rule ref="rulesets/java/design.xml/AvoidReassigningParameters" />
	<rule ref="rulesets/java/design.xml/SwitchDensity" />
	<rule ref="rulesets/java/design.xml/ConstructorCallsOverridableMethod">
		<priority>3</priority>
	</rule>
	<rule ref="rulesets/java/design.xml/AccessorClassGeneration" />
	<rule ref="rulesets/java/design.xml/FinalFieldCouldBeStatic" />
	<rule ref="rulesets/java/design.xml/CloseResource" />
	<rule ref="rulesets/java/design.xml/NonStaticInitializer" />
	<rule ref="rulesets/java/design.xml/DefaultLabelNotLastInSwitchStmt" />
	<rule ref="rulesets/java/design.xml/NonCaseLabelInSwitchStatement" />
	<rule ref="rulesets/java/design.xml/OptimizableToArrayCall" />
	<rule ref="rulesets/java/design.xml/BadComparison" />
	<rule ref="rulesets/java/design.xml/EqualsNull" />
	<rule ref="rulesets/java/design.xml/ConfusingTernary" />
	<rule ref="rulesets/java/design.xml/InstantiationToGetClass" />
	<rule ref="rulesets/java/design.xml/IdempotentOperations" />
	<rule ref="rulesets/java/design.xml/SimpleDateFormatNeedsLocale" />
	<rule ref="rulesets/java/design.xml/ImmutableField" />
	<rule ref="rulesets/java/design.xml/UseLocaleWithCaseConversions" />
	<rule ref="rulesets/java/design.xml/AvoidProtectedFieldInFinalClass" />
	<rule ref="rulesets/java/design.xml/AssignmentToNonFinalStatic" />
	<rule ref="rulesets/java/design.xml/MissingStaticMethodInNonInstantiatableClass" />
	<rule ref="rulesets/java/design.xml/AvoidSynchronizedAtMethodLevel" />
	<rule ref="rulesets/java/design.xml/MissingBreakInSwitch" />
	<rule ref="rulesets/java/design.xml/UseNotifyAllInsteadOfNotify" />
	<rule ref="rulesets/java/design.xml/AvoidInstanceofChecksInCatchClause" />
	<rule ref="rulesets/java/design.xml/AbstractClassWithoutAbstractMethod" />
	<rule ref="rulesets/java/design.xml/SimplifyConditional" />
	<rule ref="rulesets/java/design.xml/CompareObjectsWithEquals" />
	<rule ref="rulesets/java/design.xml/PositionLiteralsFirstInComparisons" />
	<rule ref="rulesets/java/design.xml/UnnecessaryLocalBeforeReturn" />
	<rule ref="rulesets/java/design.xml/NonThreadSafeSingleton" />
	<rule ref="rulesets/java/design.xml/UncommentedEmptyMethod" />
	<rule ref="rulesets/java/design.xml/UncommentedEmptyConstructor" />
	<rule ref="rulesets/java/design.xml/AvoidConstantsInterface" />
	<rule ref="rulesets/java/design.xml/UnsynchronizedStaticDateFormatter" />
	<rule ref="rulesets/java/design.xml/PreserveStackTrace" />
	<rule ref="rulesets/java/design.xml/UseCollectionIsEmpty" />
	<rule
		ref="rulesets/java/design.xml/ClassWithOnlyPrivateConstructorsShouldBeFinal" />
	<rule ref="rulesets/java/design.xml/EmptyMethodInAbstractClassShouldBeAbstract">
		<priority>3</priority>
	</rule>
	<rule ref="rulesets/java/design.xml/SingularField" />
	<rule ref="rulesets/java/design.xml/ReturnEmptyArrayRatherThanNull" >
		<priority>3</priority>
	</rule>
	<rule ref="rulesets/java/design.xml/AbstractClassWithoutAnyMethod" />
	<rule ref="rulesets/java/design.xml/TooFewBranchesForASwitchStatement" />
	<rule ref="rulesets/java/strictexception.xml/AvoidCatchingThrowable" />
	<rule ref="rulesets/java/strictexception.xml/SignatureDeclareThrowsException" />
	<rule ref="rulesets/java/strictexception.xml/ExceptionAsFlowControl" />
	<rule ref="rulesets/java/strictexception.xml/AvoidCatchingNPE" />
	<rule ref="rulesets/java/strictexception.xml/AvoidThrowingRawExceptionTypes">
		<priority>3</priority>
	</rule>
	<rule ref="rulesets/java/strictexception.xml/AvoidThrowingNullPointerException" />
	<rule ref="rulesets/java/strictexception.xml/AvoidRethrowingException" />
	<rule ref="rulesets/java/strictexception.xml/DoNotExtendJavaLangError" />
	<rule ref="rulesets/java/strictexception.xml/DoNotThrowExceptionInFinally" />
	<rule
		ref="rulesets/java/strictexception.xml/AvoidThrowingNewInstanceOfSameException" />
	<rule ref="rulesets/java/unusedcode.xml/UnusedPrivateField" />
	<rule ref="rulesets/java/unusedcode.xml/UnusedLocalVariable" />
	<rule ref="rulesets/java/unusedcode.xml/UnusedPrivateMethod" />
	<rule ref="rulesets/java/unusedcode.xml/UnusedFormalParameter" />
	<rule ref="rulesets/java/logging-java.xml/MoreThanOneLogger" />
	<rule ref="rulesets/java/logging-java.xml/LoggerIsNotStaticFinal" />
	<rule ref="rulesets/java/logging-java.xml/SystemPrintln">
		<priority>3</priority>
	</rule>
	<rule ref="rulesets/java/logging-java.xml/AvoidPrintStackTrace" />
	<rule ref="rulesets/java/strings.xml/AvoidDuplicateLiterals" />
	<rule ref="rulesets/java/strings.xml/StringInstantiation">
		<priority>3</priority>
	</rule>
	<rule ref="rulesets/java/strings.xml/StringToString" />
	<rule ref="rulesets/java/strings.xml/InefficientStringBuffering" />
	<rule ref="rulesets/java/strings.xml/UnnecessaryCaseChange" />
	<rule ref="rulesets/java/strings.xml/UseStringBufferLength" />
	<rule ref="rulesets/java/strings.xml/AppendCharacterWithChar" />
	<rule ref="rulesets/java/strings.xml/ConsecutiveLiteralAppends" />
	<rule ref="rulesets/java/strings.xml/UseIndexOfChar" />
	<rule ref="rulesets/java/strings.xml/InefficientEmptyStringCheck" />
	<rule ref="rulesets/java/strings.xml/InsufficientStringBufferDeclaration" />
	<rule ref="rulesets/java/strings.xml/UselessStringValueOf" />
	<rule ref="rulesets/java/strings.xml/StringBufferInstantiationWithChar" />
	<rule ref="rulesets/java/strings.xml/UseEqualsToCompareStrings" />
	<rule ref="rulesets/java/strings.xml/AvoidStringBufferField" />
	<rule ref="rulesets/java/migrating.xml/ReplaceVectorWithList" />
	<rule ref="rulesets/java/migrating.xml/ReplaceHashtableWithMap" />
	<rule ref="rulesets/java/migrating.xml/ReplaceEnumerationWithIterator" />
	<rule ref="rulesets/java/migrating.xml/AvoidEnumAsIdentifier" />
	<rule ref="rulesets/java/migrating.xml/AvoidAssertAsIdentifier" />
	<rule ref="rulesets/java/migrating.xml/IntegerInstantiation" />
	<rule ref="rulesets/java/migrating.xml/ByteInstantiation" />
	<rule ref="rulesets/java/migrating.xml/ShortInstantiation" />
	<rule ref="rulesets/java/migrating.xml/LongInstantiation" />
	<rule ref="rulesets/java/migrating.xml/JUnit4TestShouldUseBeforeAnnotation" />
	<rule ref="rulesets/java/migrating.xml/JUnit4TestShouldUseAfterAnnotation" />
	<rule ref="rulesets/java/migrating.xml/JUnit4TestShouldUseTestAnnotation" />
	<rule ref="rulesets/java/migrating.xml/JUnit4SuitesShouldUseSuiteAnnotation" />
	<rule ref="rulesets/java/migrating.xml/JUnitUseExpected" />
	<rule ref="rulesets/java/j2ee.xml">
	<!-- Thes rule 'DoNotUseThreads' cause false positves in the EMF Facet beacause EMF Facet 
		is not a J2EE aplication and then can use threads -->
		<exclude name="DoNotUseThreads" />
	</rule>
	<rule ref="rulesets/java/optimizations.xml/LocalVariableCouldBeFinal" />
	<rule ref="rulesets/java/optimizations.xml/MethodArgumentCouldBeFinal" />
	<rule ref="rulesets/java/optimizations.xml/AvoidInstantiatingObjectsInLoops" />
	<rule ref="rulesets/java/optimizations.xml/UseArrayListInsteadOfVector" />
	<rule ref="rulesets/java/optimizations.xml/SimplifyStartsWith" />
	<rule ref="rulesets/java/optimizations.xml/UseStringBufferForStringAppends" />
	<rule ref="rulesets/java/optimizations.xml/UseArraysAsList" />
	<rule ref="rulesets/java/optimizations.xml/AvoidArrayLoops" />
	<rule ref="rulesets/java/optimizations.xml/UnnecessaryWrapperObjectCreation" />
	<rule ref="rulesets/java/optimizations.xml/AddEmptyString" />
	<rule ref="category/java/errorprone.xml/EmptyCatchBlock" />
	<rule ref="category/java/errorprone.xml/EmptyIfStmt" />
	<rule ref="category/java/errorprone.xml/EmptyWhileStmt" />
	<rule ref="category/java/errorprone.xml/EmptyTryBlock" />
	<rule ref="category/java/errorprone.xml/EmptyFinallyBlock" />
	<rule ref="category/java/errorprone.xml/EmptySwitchStatements" />
	<rule ref="rulesets/java/basic.xml/JumbledIncrementer" />
	<rule ref="rulesets/java/basic.xml/ForLoopShouldBeWhileLoop" />
	<rule ref="rulesets/java/basic.xml/UnnecessaryConversionTemporary" />
	<rule ref="rulesets/java/basic.xml/OverrideBothEqualsAndHashcode" />
	<rule ref="rulesets/java/basic.xml/DoubleCheckedLocking" />
	<rule ref="rulesets/java/basic.xml/ReturnFromFinallyBlock" />
	<rule ref="category/java/errorprone.xml/EmptySynchronizedBlock" />
	<rule ref="rulesets/java/basic.xml/UnnecessaryReturn" />
	<rule ref="rulesets/java/basic.xml/EmptyStaticInitializer" />
	<rule ref="rulesets/java/basic.xml/UnconditionalIfStatement" />
	<rule ref="rulesets/java/basic.xml/EmptyStatementNotInLoop" />
	<rule ref="rulesets/java/basic.xml/BooleanInstantiation">
		<priority>3</priority>
	</rule>
	<rule ref="rulesets/java/basic.xml/UnnecessaryFinalModifier" />
	<rule ref="rulesets/java/basic.xml/CollapsibleIfStatements" />
	<rule ref="rulesets/java/basic.xml/UselessOverridingMethod" />
	<rule ref="rulesets/java/basic.xml/ClassCastExceptionWithToArray" />
	<rule ref="rulesets/java/basic.xml/AvoidDecimalLiteralsInBigDecimalConstructor" />
	<rule ref="rulesets/java/basic.xml/UselessOperationOnImmutable" />
	<rule ref="rulesets/java/basic.xml/MisplacedNullCheck" />
	<rule ref="rulesets/java/basic.xml/UnusedNullCheckInEquals" />
	<rule ref="rulesets/java/basic.xml/AvoidThreadGroup" />
	<rule ref="rulesets/java/basic.xml/BrokenNullCheck" />
	<rule ref="rulesets/java/basic.xml/BigIntegerInstantiation" />
	<rule ref="rulesets/java/basic.xml/AvoidUsingOctalValues" />
	<rule ref="rulesets/java/basic.xml/AvoidUsingHardCodedIP" />
	<rule ref="rulesets/java/basic.xml/CheckResultSet" />
	<rule ref="rulesets/java/basic.xml/AvoidMultipleUnaryOperators" />
	<rule ref="rulesets/java/basic.xml/EmptyInitializer" />
	<rule ref="rulesets/java/sunsecure.xml/MethodReturnsInternalArray" />
	<rule ref="rulesets/java/sunsecure.xml/ArrayIsStoredDirectly" />
	<rule ref="rulesets/java/coupling.xml/CouplingBetweenObjects" />
	<rule ref="rulesets/java/coupling.xml/ExcessiveImports" />
	<rule ref="rulesets/java/coupling.xml/LooseCoupling" />
	<rule ref="rulesets/java/imports.xml/DuplicateImports" />
	<rule ref="rulesets/java/imports.xml/DontImportJavaLang" />
	<rule ref="rulesets/java/imports.xml/UnusedImports" />
	<rule ref="rulesets/java/imports.xml/ImportFromSamePackage" />
	<rule ref="rulesets/java/imports.xml/TooManyStaticImports" />
	<rule ref="rulesets/java/junit.xml/JUnitStaticSuite" />
	<rule ref="rulesets/java/junit.xml/JUnitSpelling" />
	<rule ref="rulesets/java/junit.xml/JUnitAssertionsShouldIncludeMessage" />
	<rule ref="rulesets/java/junit.xml/JUnitTestsShouldIncludeAssert" />
	<rule ref="rulesets/java/junit.xml/TestClassWithoutTestCases" />
	<rule ref="rulesets/java/junit.xml/UnnecessaryBooleanAssertion" />
	<rule ref="rulesets/java/junit.xml/UseAssertEqualsInsteadOfAssertTrue" />
	<rule ref="rulesets/java/junit.xml/UseAssertSameInsteadOfAssertTrue" />
	<rule ref="rulesets/java/junit.xml/UseAssertNullInsteadOfAssertTrue" />
	<rule ref="rulesets/java/junit.xml/SimplifyBooleanAssertion" />
	<rule ref="rulesets/java/controversial.xml" >
		<!-- The rule 'DataflowAnomalyAnalysis' generates to many false positive. -->
		<exclude name="DataflowAnomalyAnalysis" />
		<exclude name="BooleanInversion" />
	</rule>
	<rule ref="rulesets/java/naming.xml/ShortVariable" />
	<rule ref="rulesets/java/naming.xml/LongVariable" />
	<rule ref="rulesets/java/naming.xml/ShortMethodName" />
	<rule ref="rulesets/java/naming.xml/VariableNamingConventions">
		<priority>3</priority>
	</rule>
	<rule ref="rulesets/java/naming.xml/MethodNamingConventions" />
	<rule ref="rulesets/java/naming.xml/ClassNamingConventions" />
	<rule ref="rulesets/java/naming.xml/AbstractNaming" />
	<rule ref="rulesets/java/naming.xml/AvoidDollarSigns" />
	<rule ref="rulesets/java/naming.xml/MethodWithSameNameAsEnclosingClass" />
	<rule ref="rulesets/java/naming.xml/SuspiciousHashcodeMethodName" />
	<rule ref="rulesets/java/naming.xml/SuspiciousConstantFieldName" />
	<rule ref="rulesets/java/naming.xml/SuspiciousEqualsMethodName" />
	<rule ref="rulesets/java/naming.xml/AvoidFieldNameMatchingTypeName" />
	<rule ref="rulesets/java/naming.xml/AvoidFieldNameMatchingMethodName" />
	<rule ref="rulesets/java/naming.xml/NoPackage" />
	<rule ref="rulesets/java/naming.xml/PackageCase" />
	<rule ref="rulesets/java/naming.xml/MisleadingVariableName" />
	<rule ref="rulesets/java/naming.xml/BooleanGetMethodName" />
	<rule ref="rulesets/java/codesize.xml/NPathComplexity" />
	<rule ref="rulesets/java/codesize.xml/ExcessiveMethodLength" />
	<rule ref="rulesets/java/codesize.xml/ExcessiveParameterList" />
	<rule ref="rulesets/java/codesize.xml/ExcessiveClassLength" />
	<rule ref="rulesets/java/codesize.xml/CyclomaticComplexity" />
	<rule ref="rulesets/java/codesize.xml/ExcessivePublicCount" />
	<rule ref="rulesets/java/codesize.xml/TooManyFields" />
	<rule ref="rulesets/java/codesize.xml/NcssMethodCount" />
	<rule ref="rulesets/java/codesize.xml/NcssTypeCount" />
	<rule ref="rulesets/java/codesize.xml/NcssConstructorCount" />
	<!-- This maximum number of methods is set to 10 by default. I assume that 
		10 is tolerant approximation of 7 (+/- 2) which is number of item that a 
		humane brain can managed in one time. If we apply this rule to UI or a functional 
		component, we will get at least 7 “functional” methods on a UI class and 
		we will have to add all the technical methods (about twice). So the total 
		amount of methods will regularly be near 14. This is definitively over the 
		human brain capacity. Those considerations lead me to conclude that to increase 
		the number of methods limit is useless. That why, to my mind this rule will 
		not be applicable in the majority of cases. This rule must then be deprecated. -->
	<!--  <rule ref="rulesets/java/codesize.xml/TooManyMethods" /> -->
	<rule ref="rulesets/java/finalizers.xml/EmptyFinalizer" />
	<rule ref="rulesets/java/finalizers.xml/FinalizeOnlyCallsSuperFinalize" />
	<rule ref="rulesets/java/finalizers.xml/FinalizeOverloaded" />
	<rule ref="rulesets/java/finalizers.xml/FinalizeDoesNotCallSuperFinalize" />
	<rule ref="rulesets/java/finalizers.xml/FinalizeShouldBeProtected" />
	<rule ref="rulesets/java/finalizers.xml/AvoidCallingFinalize" />
	<rule ref="rulesets/java/logging-jakarta-commons.xml/UseCorrectExceptionLogging" />
	<rule ref="rulesets/java/logging-jakarta-commons.xml/ProperLogger" />
	<rule ref="rulesets/java/javabeans.xml">
		<!-- The rule 'BeanMembersShouldSerialize' is useless in the EMF Facet context beacause each bean has 
			to be implemented using an ecore model. -->
		<exclude name="BeanMembersShouldSerialize" />
	</rule>
	<rule ref="rulesets/java/clone.xml/ProperCloneImplementation" >
		<priority>3</priority>
	</rule>
	<rule ref="rulesets/java/clone.xml/CloneThrowsCloneNotSupportedException" />
	<rule ref="rulesets/java/clone.xml/CloneMethodMustImplementCloneable" />
</ruleset>
