[comment /*******************************************************************************
 * Copyright (c) 2009 Mia-Software.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Nicolas Payneau (Mia-Software) - initial API and implementation
 *******************************************************************************/]

[module generateMoDiscoWork('http://www.eclipse.org/gmt/modisco/workflow')/]

[import common /]
[import generateInitFiles /]
[import generateLaunchFiles /]



[template public generateMoDiscoWork(w : Workflow)]
	[generateElements(w,w)/]
	[generateInitFiles(w, w.packageBase)/]
	[generateLaunchFiles(w,w,w.packageBase)/]
[/template]

[template private generateElements(elementRoot : Workflow, elementProcess : Element)]
[if elementProcess.oclIsTypeOf(Work)]
	[if (not removeDoublons(elementRoot, elementProcess.index, elementProcess))]
	[file ('/src/'.concat(elementRoot.packageBase.substituteAll('.', '/')).concat('/modiscoworks/').concat(elementProcess.name.trim().toUpperFirst().concat('.java')), false)]
package [elementRoot.packageBase/].modiscoworks;	
	
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.gmt.modisco.workflow.DriverExecutionInterface;
import org.eclipse.gmt.modisco.workflow.controller.ControllerDriverPage;
import org.eclipse.gmt.modisco.workflow.modiscoworkflow.Element;
import org.eclipse.gmt.modisco.workflow.modiscoworkflow.Workflow;
import org.eclipse.gmt.modisco.workflow.modiscoworkflow.Work;
import org.eclipse.gmt.modisco.workflow.modiscoworkflow.WorkParameterValue;
import org.eclipse.gmt.modisco.workflow.modiscoworkflow.WorkParameter;
import org.eclipse.gmt.modisco.workflow.modiscoworkflow.Direction;
import org.eclipse.gmt.modisco.workflow.modiscoworkflow.ModiscoworkflowPackage;
import org.eclipse.core.resources.ResourcesPlugin;

public class [elementProcess.name.trim().toUpperFirst()/]{
	private Workflow workflow;
	private Resource resource;
	private Work element;
	

	public [elementProcess.name.trim().toUpperFirst()/](){
		initialization();
	}
	
	private void initialization(){
		ModiscoworkflowPackage.eINSTANCE.eClass();
		URI uri = URI.createFileURI(ResourcesPlugin.getWorkspace().getRoot().getLocation().append("[elementRoot.symbolicName.toLower()/]").append("[elementRoot.symbolicName.toLower()/]").addFileExtension("modiscoworkflow").toString());
		ResourceSet resSet = new ResourceSetImpl();
		this.resource = resSet.getResource(uri,true);
		this.workflow = (Workflow)resource.getContents().get(0);
		findMoDiscoWork(this.workflow.getElements());
	}
	
	private void findMoDiscoWork(List<Element> elements) {
		for(Element elmt : elements){
			if(elmt.getName().equals("[elementProcess.name.trim()/]")){
				this.element = (Work)elmt;
				break;
			}
			if(elmt instanceof Workflow){
				findMoDiscoWork(((Workflow)elmt).getElements());
			}
		}
	}
	
	public void launch(){
		try {
			this.resource.save(null);
		} catch (IOException e) {
			e.printStackTrace();
		}
		ControllerDriverPage controller = new ControllerDriverPage();
		DriverExecutionInterface driver = controller.findPlugIn(getType());
		driver.launch(this.element);
	}

	public String getName(){
		return this.element.getName();
	}
	
	public String getType(){
		return this.element.getType();
	}
	
	public int getIndex(){
		return this.element.getIndex();
	}
	
	public Map<String,WorkParameterValue> getParameters(){
		Map<String, WorkParameterValue> valueMap = new HashMap<String, WorkParameterValue>();
		for(WorkParameter parameter :this.element.getParameters()){
			valueMap.put(parameter.getName(), parameter.getValue());
		}
		return valueMap;
	}	

	public Map<String,WorkParameterValue> getInputs(){
		Map<String, WorkParameterValue> valueMap = new HashMap<String, WorkParameterValue>();
		for(WorkParameter parameter :this.element.getParameters()){
			if(parameter.getDirection().equals(Direction.IN)){
				valueMap.put(parameter.getName(), parameter.getValue());
			}
		}
		return valueMap;
	}
}
	[/file]
	[/if]
[/if]
[if (elementProcess.oclIsTypeOf(Workflow))]
	[for ( elmt : Element | elementProcess.oclAsType(Workflow).elements)]
		[generateElements(elementRoot,elmt)/]
	[/for]
[/if]
[/template]
