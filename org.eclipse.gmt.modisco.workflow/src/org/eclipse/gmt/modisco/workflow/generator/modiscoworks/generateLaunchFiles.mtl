[comment /*******************************************************************************
 * Copyright (c) 2009 Mia-Software.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Nicolas Payneau (Mia-Software) - initial API and implementation
 *******************************************************************************/]
 
[module generateLaunchFiles('http://www.eclipse.org/gmt/modisco/workflow')/]

[import common /]

[template public generateLaunchFiles(workflowRoot : Workflow, w : Workflow, packageBaseRoot: String)]
	[file ('/src/'.concat(packageBaseRoot.substituteAll('.', '/')).concat('/modiscoworks/').concat('Launch').concat(w.name.toUpperFirst()).concat('.java'), false)]
package [packageBaseRoot/].modiscoworks;

import org.eclipse.emf.ecore.resource.Resource;

public class Launch[w.name.toUpperFirst()/] {

	public Resource launchWorkflow(Init[workflowRoot.name.toUpperFirst()/] init) {
		[for (elmt : Element | w.elements)]
			[if elmt.oclIsTypeOf(Work)]
				[if (not removeDoublons(w, elmt.index, elmt))]
		[elmt.name.trim().toUpperFirst()/] [elmt.name.trim().toLower()/] = init.get[elmt.name.trim().toUpperFirst()/]();	
				[/if]
		[elmt.name.trim().toLower()/].launch();
			[/if]
			[if elmt.oclIsTypeOf(Workflow)]
				[if (not removeDoublons(w, elmt.index, elmt))]
		Launch[elmt.name.trim().toUpperFirst()/] launch[elmt.name.trim().toUpperFirst()/] = new Launch[elmt.name.trim().toUpperFirst()/]();
				[/if]
		launch[elmt.name.trim().toUpperFirst()/].launchWorkflow(init);
			[/if]
		[/for]
		return null;
	}
}
	[/file]
	[for ( elmt : Element | w.elements)]
		[if (elmt.oclIsTypeOf(Workflow))]
			[let workflow2 : Workflow = elmt.oclAsType(Workflow)]
				[generateLaunchFiles(workflowRoot, workflow2, packageBaseRoot)/]
			[/let]
		[/if]
	[/for]
[/template]
