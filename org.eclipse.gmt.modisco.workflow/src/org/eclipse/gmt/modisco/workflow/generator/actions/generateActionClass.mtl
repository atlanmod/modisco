[comment /*******************************************************************************
 * Copyright (c) 2009 Mia-Software.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Nicolas Payneau (Mia-Software) - initial API and implementation
 *******************************************************************************/]

[module generateActionClass('http://www.eclipse.org/gmt/modisco/workflow')/]

[import worksInitialization /]

[template public generateActionClass(w : Workflow)]
	[comment To have only one Action class /]
	[file ('/src/'.concat(w.packageBase.substituteAll('.', '/')).concat('/actions/').concat(w.name.replaceAll(' ','').toUpperFirst().concat('DiscoveryAction.java')), false)]
package [w.packageBase/].actions;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.common.util.URI;
import org.eclipse.gmt.modisco.infra.discoverymanager.Discoverer;
import org.eclipse.gmt.modisco.infra.discoverymanager.DiscoveryParameter;
import org.eclipse.gmt.modisco.infra.discoverymanager.DiscoveryParameterDirectionKind;
import org.eclipse.gmt.modisco.infra.discoverymanager.DiscoveryParameterImpl;
import [w.packageBase/].modiscoworks.Init[w.name.trim().toUpperFirst()/];
import [w.packageBase/].modiscoworks.Launch[w.name.trim().toUpperFirst()/];
[for (elmt : Element | w.getAllUnitsOfWork())]
import [w.packageBase/].modiscoworks.[elmt.name.toUpperFirst()/];
[/for]

public class [w.name.replaceAll(' ','').toUpperFirst()/]DiscoveryAction  implements Discoverer {
	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.eclipse.gmt.modisco.discoverersmanager.DiscovererInterface#applyTo
	 * (java.lang.Object)
	 */
	public boolean isApplicableTo(final Object source) {
		return true;
	}
	
	/*
	 * (non-Javadoc)
	 * 
	 * @seeorg.eclipse.gmt.modisco.discoverersmanager.DiscovererInterface#
	 * discoverElement(java.lang.Object, org.eclipse.emf.common.util.URI)
	 */
	public Resource discoverElement(Object source,URI target) {
		Resource result = null;
		Init[w.name.trim().toUpperFirst()/] init[w.name.trim().toUpperFirst()/] = new Init[w.name.trim().toUpperFirst()/]();
		[worksInitialization(w, 'init'.concat(w.name.trim().toUpperFirst()))/]
		
		
		//[protected ('to define the parameters of the MoDiscoWorks')]
		/*
		*Map<String,MoDiscoWorkParameterValue> parametersMap = testATL.getParameters();
		*((MoDiscoWorkParameterStringValue)parametersMap.get("ATL File Name")).setValue("/Test/test/J2SE5ToKDM.atl");*/
		
		//[/protected]
		
		
		Launch[w.name.trim().toUpperFirst()/] launcher = new Launch[w.name.trim().toUpperFirst()/]();
		launcher.launchWorkflow(init[w.name.trim().toUpperFirst()/]);
		result = launcher.launchWorkflow(init[w.name.trim().toUpperFirst()/]);
		
		return result;
	}
	
	public String toString() {
		return "Discover workflow from your project";
	}

	public [w.name.replaceAll(' ','').toUpperFirst()/]DiscoveryAction() {
		this.targetModel = new DiscoveryParameterImpl("TargetModel", DiscoveryParameterDirectionKind.out, Resource.class, false);
		this.discovererParameters.add(this.targetModel);
		this.targetUri = new DiscoveryParameterImpl("TargetUri", DiscoveryParameterDirectionKind.in, URI.class, false);
		this.discovererParameters.add(this.targetUri);
	}

	private final DiscoveryParameterImpl targetModel;
	private final DiscoveryParameterImpl targetUri;
	private final List<DiscoveryParameter> discovererParameters = new ArrayList<DiscoveryParameter>();
	
	public void discoverElement(final Object source,
			final Map<DiscoveryParameter, Object> parameters) {
		URI targetUri = null;
		if (parameters.containsKey(this.targetUri)) {
			Object value = parameters.get(this.targetUri);
			if (value instanceof URI) {
				targetUri = (URI) value;
			}
		}
		Resource result = this.discoverElement(source, targetUri);
		parameters.put(this.targetModel, result);
	}

	public List<DiscoveryParameter> getDiscovererParameters() {
		return Collections.unmodifiableList(this.discovererParameters);
	}
}
	[/file]
[/template]
